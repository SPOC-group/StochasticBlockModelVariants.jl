## Model

"""
    ContextualSBM

A generative model for graphs with node features, which combines the Stochastic Block Model with a mixture of Gaussians.

Reference: <https://arxiv.org/abs/2306.07948>

# Fields

- `N`: graph size
- `P`: feature dimension
- `d`: average degree
- `λ`: SNR of the communities
- `μ`: SNR of the features
- `ρ`: fraction of nodes revealed
"""
struct ContextualSBM{R<:Real}
    N::Int
    P::Int
    d::R
    λ::R
    μ::R
    ρ::R

    function ContextualSBM(;
        N::Integer, P::Integer, d::R1, λ::R2, μ::R3, ρ::R4
    ) where {R1,R2,R3,R4}
        R = promote_type(R1, R2, R3, R4)
        return new{R}(N, P, d, λ, μ, ρ)
    end
end

"""
    effective_snr(csbm)

Compute the effective SNR `λ² + μ² / (N/P)`.
"""
function effective_snr(csbm::ContextualSBM)
    (; λ, μ, N, P) = csbm
    return abs2(λ) + abs2(μ) / (N / P)
end

"""
    affinities(csbm)

Return a named tuple `(; cᵢ, cₒ)` containing the affinities inside and outside of a community.
"""
function affinities(csbm::ContextualSBM)
    (; d, λ) = csbm
    cᵢ = d + λ * sqrt(d)
    cₒ = d - λ * sqrt(d)
    return (; cᵢ, cₒ)
end

## Latents

"""
    ContextualSBMLatents

The hidden variables generated by sampling from a [`ContextualSBM`](@ref).

# Fields

- `u::Vector`: community assignments, length `N`
- `v::Vector`: feature centroids, length `P`
"""
@kwdef struct ContextualSBMLatents{R<:Real}
    u::Vector{Int}
    v::Vector{R}
end

## Observations

"""
    ContextualSBMObservations

The observations generated by sampling from a [`ContextualSBM`](@ref).

# Fields

- `g::AbstractGraph`: undirected, unweighted graph generated from the adjacency matrix
- `B::Matrix`: feature matrix, size `(P, N)`
"""
@kwdef struct ContextualSBMObservations{R<:Real,G<:AbstractGraph{Int}}
    B::Matrix{R}
    g::G
end

## Simulation

"""
    rand(rng, csbm)

Sample from a [`ContextualSBM`](@ref) and return a named tuple `(; latents, observations)`.
"""
function Base.rand(rng::AbstractRNG, csbm::ContextualSBM)
    (; μ, N, P) = csbm
    (; cᵢ, cₒ) = affinities(csbm)

    u = rand(rng, (-1, +1), N)
    v = randn(rng, P)
    latents = ContextualSBMLatents(; u, v)

    Is, Js = Int[], Int[]
    for i in 1:N, j in (i + 1):N
        r = rand(rng)
        if (
            ((u[i] == u[j]) && (r < cᵢ / N)) ||  # same community
            ((u[i] != u[j]) && (r < cₒ / N))  # different community
        )
            push!(Is, i)
            push!(Is, j)
            push!(Js, j)
            push!(Js, i)
        end
    end
    Vs = fill(true, length(Is))
    A = sparse(Is, Js, Vs, N, N)
    g = SimpleWeightedGraph(A)

    B = randn(rng, P, N)
    for i in 1:N, α in 1:P
        B[α, i] += sqrt(μ / N) * v[α] * u[i]
    end

    observations = ContextualSBMObservations(; g, B)
    return (; latents, observations)
end
